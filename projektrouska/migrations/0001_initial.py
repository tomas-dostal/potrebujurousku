# Generated by Django 3.1 on 2021-01-03 19:33

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('codename', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('email', models.CharField(blank=True, max_length=254, null=True)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(blank=True, max_length=200, null=True)),
                ('action_flag', models.IntegerField()),
                ('change_message', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(blank=True, max_length=100, null=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField(blank=True, null=True)),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('fa_icon', models.CharField(max_length=50)),
                ('priority', models.IntegerField()),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'city',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=60, null=True)),
                ('code', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'district',
            },
        ),
        migrations.CreateModel(
            name='ExternalContent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_inserted', models.DateTimeField(default=datetime.datetime.now)),
                ('date_modified', models.DateTimeField(blank=True, null=True)),
                ('content_type', models.CharField(choices=[('URL', 'URL link to general content'),
                                                           ('PDF', 'URL link to PDF'),
                                                           ('IMG', 'URL link to IMAGE'),
                                                           ('VID', 'URL link VIDEO')],
                                                  default='URL', max_length=3)),
                ('preview', models.BooleanField()),
                ('img_thumbnail', models.URLField(blank=True, null=True)),
                ('url_external', models.URLField()),
                ('url_local_copy', models.URLField(blank=True, null=True)),
                ('content_hash', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'external_content',
            },
        ),
        migrations.CreateModel(
            name='Nuts4',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('code_index', models.BigIntegerField(blank=True, null=True)),
                ('code', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'nuts4',
            },
        ),
        migrations.CreateModel(
            name='Parts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('content', models.TextField(blank=True, null=True)),
                ('exceptions', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('info', 'Information, not requiered to be complienced'),
                                                   ('warning', 'Recommendation, not requiered to be complienced'),
                                                   ('danger', 'Regulation, requiered to be complienced'),
                                                   ('black', 'Emergency regulation, requiered to be complienced')]
                                          , default='danger', max_length=15)),
                ('modal_size', models.CharField(choices=[('modal-sm', 'Small'),
                                                         ('modal-md', 'Medium'),
                                                         ('modal-lg', 'Large')],
                                                default='modal-md', max_length=15)),
                ('icon', models.CharField(blank=True, max_length=40, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                               to='projektrouska.category')),
                ('external_contents', models.ManyToManyField(to='projektrouska.ExternalContent')),
            ],
            options={
                'db_table': 'part',
            },
        ),
        migrations.CreateModel(
            name='PES_general',
            fields=[
                ('degree', models.AutoField(primary_key=True, serialize=False)),
                ('min_value', models.IntegerField()),
                ('max_value', models.IntegerField()),
                ('description', models.TextField()),
                ('color', models.CharField(max_length=10)),
                ('external_contents', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                        to='projektrouska.externalcontent')),
                ('parts', models.ManyToManyField(to='projektrouska.Parts')),
            ],
            options={
                'db_table': 'pes_general',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'state',
            },
        ),
        migrations.CreateModel(
            name='UpdateLogs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('checksum', models.CharField(max_length=50, null=True)),
                ('date_updated', models.DateTimeField(default=datetime.datetime.now)),
                ('comment', models.TextField(blank=True, null=True)),
                ('up_to_date_percents', models.IntegerField(blank=True, null=True)),
                ('missing_count', models.IntegerField(blank=True, null=True)),
                ('missing_json', models.TextField(blank=True, null=True)),
                ('change_link_count', models.IntegerField(blank=True, null=True)),
                ('change_link_json', models.TextField(blank=True, null=True)),
                ('outdated_count', models.IntegerField(blank=True, null=True)),
                ('outdated_json', models.TextField(blank=True, null=True)),
                ('total_changes', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'update_logs',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25)),
                ('code_index', models.IntegerField(blank=True, null=True)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.state')),
            ],
            options={
                'db_table': 'region',
                'unique_together': {('id', 'state')},
            },
        ),
        migrations.CreateModel(
            name='Precaution',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code_identificator', models.CharField(blank=True, max_length=50, null=True)),
                ('full_name', models.CharField(max_length=400)),
                ('short_name', models.CharField(blank=True, max_length=400, null=True)),
                ('valid_from', models.DateTimeField(blank=True, null=True)),
                ('valid_to', models.DateTimeField(blank=True, null=True)),
                ('status', models.IntegerField(
                    choices=[(1, 'Active (auto)'), (0, 'Disabled (auto)'), (3, 'Active (force)'),
                             (-1, 'Disabled (force)'), (2, 'Active (check required)'),
                             (-2, 'Disabled (maintenance in progress)')], default=2)),
                ('priority',
                 models.IntegerField(choices=[(-1, 'Not filled'),
                                              (0, 'Redundant (it is here just to auto-check to be satisfied)'),
                                              (1, 'It might be useful'),
                                              (10, 'Slightly important information, good to know'),
                                              (100, 'Important information, have to know'),
                                              (1000, 'Extremely important')],
                                     default=-1)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('city', models.ManyToManyField(to='projektrouska.City')),
                ('district', models.ManyToManyField(to='projektrouska.District')),
                ('external_contents', models.ManyToManyField(to='projektrouska.ExternalContent')),
                ('nuts4', models.ManyToManyField(to='projektrouska.Nuts4')),
                ('parts', models.ManyToManyField(to='projektrouska.Parts')),
                ('region', models.ManyToManyField(to='projektrouska.Region')),
                ('state', models.ManyToManyField(to='projektrouska.State')),
            ],
            options={
                'db_table': 'precaution',
            },
        ),
        migrations.CreateModel(
            name='PES_history',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_from', models.DateTimeField()),
                ('date_to', models.DateTimeField(blank=True, null=True)),
                ('index', models.IntegerField()),
                ('pes_general',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.pes_general')),
                ('precautions', models.ManyToManyField(to='projektrouska.Precaution')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.region')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.state')),
            ],
            options={
                'db_table': 'pes_history',
            },
        ),
        migrations.AddField(
            model_name='nuts4',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.region'),
        ),
        migrations.AddField(
            model_name='nuts4',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.state'),
        ),
        migrations.AddField(
            model_name='district',
            name='nuts4',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.nuts4'),
        ),
        migrations.AddField(
            model_name='district',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.region'),
        ),
        migrations.AddField(
            model_name='district',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.state'),
        ),
        migrations.AddField(
            model_name='city',
            name='district',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.district'),
        ),
        migrations.AddField(
            model_name='city',
            name='nuts4',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.nuts4'),
        ),
        migrations.AddField(
            model_name='city',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.region'),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projektrouska.state'),
        ),
        migrations.AlterUniqueTogether(
            name='nuts4',
            unique_together={('id', 'region', 'state')},
        ),
        migrations.AlterUniqueTogether(
            name='district',
            unique_together={('id', 'nuts4', 'region', 'state')},
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together={('id', 'nuts4', 'district', 'region', 'state')},
        ),
    ]
